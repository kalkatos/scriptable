using Sirenix.OdinInspector;

#if UNITY_EDITOR
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using UnityEditor;
using UnityEngine;
#endif

namespace Kalkatos.UnityGame.Scriptable
{
	[CreateAssetMenu(fileName = "SignalRegistry", menuName = "Signals/Signal Registry")]
	public partial class SignalRegistry : SingletonScriptableObject<SignalRegistry>
	{
		[Header("Paths")]
		[FolderPath]
		[SerializeField] private string originFolder;
		[FolderPath]
		[SerializeField] private string targetScriptsFolder;

		[ReadOnly, SerializeField] private bool mustUpdateSignalRegistry;

#if UNITY_EDITOR
		[PropertySpace(15), Button(ButtonHeight = 30)]
		private void UpdateSignalRegistryUsingOriginFolder ()
		{
			mustUpdateSignalRegistry = true;
			CreateScript();
		}

		private Object[] GetAllSignalRegistries ()
		{
			var allFolders = new List<string>();
			GetAllFolders(originFolder);

			void GetAllFolders (string path)
			{
				if (AssetDatabase.IsValidFolder(path))
				{
					allFolders.Add(path);
					var directories = Directory.EnumerateDirectories(path);
					foreach (var d in directories)
						GetAllFolders(d);
				}
				else if (allFolders.Count == 0)
					this.LogWarning($"The path '{path}' does not point to a valid folder");
			}

			var guids = AssetDatabase.FindAssets("", allFolders.ToArray());
			List<Object> assets = new();
			foreach (var guid in guids)
				assets.Add(AssetDatabase.LoadAssetAtPath<Object>(AssetDatabase.GUIDToAssetPath(guid)));
			return assets.Where(a => a is SignalBase).ToArray();
		}

		private void CreateScript ()
		{
			StringBuilder sb = new StringBuilder();
			sb.AppendLine("using Sirenix.OdinInspector;");
			sb.AppendLine("using UnityEngine;");
			sb.AppendLine();
			sb.AppendLine("namespace Kalkatos.UnityGame.Scriptable");
			sb.AppendLine("{");
			sb.AppendLine("\tpublic partial class SignalRegistry : SingletonScriptableObject<SignalRegistry>");
			sb.AppendLine("\t{");

			var signals = GetAllSignalRegistries();
			foreach (var signal in signals)
			{
				string name = ToSignalName(signal.name);
				sb.AppendLine($"\t\t[Required] public {signal.GetType().Name} {name};");
			}

			sb.AppendLine("\t}");
			sb.AppendLine("}");
			File.WriteAllText($"{targetScriptsFolder}/AutoGeneratedSignalRegistry.cs", sb.ToString());
			AssetDatabase.Refresh();
		}

		private static string ToSignalName (string signalName)
		{
			if (!signalName.Contains(' '))
				return signalName;
			return signalName.Replace(' ', '_');
		}

		[InitializeOnLoadMethod]
		private static void OnFinishedCompilation ()
		{
			SignalRegistry registry = SignalRegistry.Instance;
			if (registry == null)
			{
				registry.LogWarning("No 'SignalRegistry' scriptable object found.");
				return;
			}
			if (!registry.mustUpdateSignalRegistry)
			{
				registry.Log("No need to update signals.");
				return;
			}
			registry.mustUpdateSignalRegistry = false;
			registry.Log("Updating SignalRegistry fields...");
			bool updated = false;
			var fields = registry.GetType().GetFields();
			var signals = registry.GetAllSignalRegistries();
			foreach (var field in fields)
			{
				var signal = signals.FirstOrDefault(e => ToSignalName(e.name) == field.Name);
				if (signal == null)
					continue;
				registry.Log($"Set field {field.Name} to value {signal}");
				field.SetValue(registry, signal);
				updated = true;
			}
			if (updated)
			{
				AssetDatabase.Refresh();
				registry.Log("Updated signals");
			}
		}
#endif
	}
}
